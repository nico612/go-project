// Code generated by global-language. DO NOT EDIT.
package i18n

import (
    "context"
    "fmt"
    "strings"

    "github.com/spf13/cast"
)
{{range $d := .}}
// {{exportable $d.Key}} {{$d.Msg}}
{{- if $d.Args}}
{{- $lastIdx := lastIndex $d.Args}}
func {{exportable $d.Key}}({{range $i, $k := $d.Args}}{{camel $k}} any{{if lt $i $lastIdx}}, {{end}}{{end}}) message {
    args := map[string]string{ {{range $d.Args}}"{{.}}": cast.ToString({{camel .}}), {{end}} }
    return message{ key: "{{$d.Key}}", args: args }
}
{{- else}}
func {{exportable $d.Key}}() message {
    return message{ key: "{{$d.Key}}", args: nil }
}
{{- end}}
{{end}}

type message struct {
    key  string
    args map[string]string
}

func (m message) Args() map[string]string {
    return m.args
}

func (m message) Key() string {
    return m.key
}

type Message interface {
    Key() string
    Args() map[string]string
}

type langKey struct{}

func WithLang(ctx context.Context, lang string) context.Context {
    return context.WithValue(ctx, langKey{}, lang)
}

func FromContext(ctx context.Context) string {
    lang := ctx.Value(langKey{})
    if lang == nil {
        return ""
    }

    return lang.(string)
}

func Translate(lang string, msg Message) string {
    m := Languages[lang]
    if m == nil {
        m = Languages["en"]
    }

    content := m[msg.Key()]
    for k, v := range msg.Args() {
        content = strings.ReplaceAll(content, fmt.Sprintf("${%s}", k), cast.ToString(v))
    }

    return content
}

func TranslateFromContext(ctx context.Context, msg Message) string {
    lang := FromContext(ctx)
    return Translate(lang, msg)
}
